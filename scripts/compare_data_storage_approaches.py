#!/usr/bin/env python3
"""
Demonstration script: Selected fields vs Complete AeroAPI JSON storage

Shows the difference between:
1. OLD: Only selected fields in metadata
2. NEW: Selected fields + complete AeroAPI JSON in raw_data

Usage: python scripts/compare_data_storage_approaches.py
"""

import asyncio
import sys
import os
import json
from datetime import datetime, timezone

# Add app to path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.services.aeroapi_client import AeroAPIClient
import structlog

logger = structlog.get_logger()

# Simulated AeroAPI response (example of what we get vs what we store)
EXAMPLE_AEROAPI_RESPONSE = {
    "flights": [
        {
            "ident": "BAW820",
            "status": "Scheduled",
            "estimated_out": "2025-07-09T16:20:00Z",
            "estimated_on": "2025-07-09T18:01:00Z",
            "actual_out": None,
            "actual_on": None,
            "gate_origin": "A13",
            "gate_destination": None,
            "departure_delay": 3600,
            "arrival_delay": 3180,
            "cancelled": False,
            "diverted": False,
            "progress_percent": 0,
            "aircraft_type": "A20N",
            "scheduled_out": "2025-07-09T15:20:00Z",
            "scheduled_on": "2025-07-09T17:01:00Z",
            "scheduled_block_time_minutes": 101,
            "filed_ete": 6300,
            # ADDITIONAL DATA WE WERE LOSING:
            "origin": {
                "code_iata": "LHR",
                "code_icao": "EGLL", 
                "name": "London Heathrow Airport",
                "city": "London",
                "timezone": "Europe/London",
                "coordinates": [51.4775, -0.461389]
            },
            "destination": {
                "code_iata": "CPH",
                "code_icao": "EKCH",
                "name": "Copenhagen Kastrup Airport", 
                "city": "Copenhagen",
                "timezone": "Europe/Copenhagen",
                "coordinates": [55.617917, 12.655972]
            },
            "operator": {
                "name": "British Airways",
                "iata": "BA",
                "icao": "BAW"
            },
            "aircraft": {
                "type": "A20N",
                "registration": "G-TTNE",
                "manufacturer": "Airbus",
                "model": "A320neo"
            },
            "position": {
                "latitude": 51.4775,
                "longitude": -0.461389,
                "altitude": 0,
                "ground_speed": 0,
                "track": 0
            },
            "route": {
                "waypoints": ["EGLL", "SILVA", "REDFA", "EKCH"],
                "distance_nm": 608
            },
            "blocked": False,
            "codeshares": ["SAS4680", "AA6945"],
            "baggage_claim": "14",
            "seats": {
                "cabin_business": 20,
                "cabin_economy": 138,
                "total": 158
            }
        }
    ],
    "links": {
        "next": None,
        "previous": None
    },
    "num_pages": 1
}

def show_old_approach():
    """Show what we used to store in metadata (limited fields)"""
    print("üî∫ OLD APPROACH - Only Selected Fields in Metadata:")
    print("=" * 60)
    
    flight = EXAMPLE_AEROAPI_RESPONSE["flights"][0]
    
    old_metadata = {
        "last_aeroapi_sync": datetime.now(timezone.utc).isoformat(),
        "flight_data": {
            "gate_destination": flight["gate_destination"],
            "estimated_in": flight["estimated_on"],
            "actual_out": flight["actual_out"],
            "actual_in": flight["actual_on"],
            "aircraft_type": flight["aircraft_type"],
            "progress_percent": flight["progress_percent"],
            "departure_delay": flight["departure_delay"],
            "arrival_delay": flight["arrival_delay"],
            "cancelled": flight["cancelled"],
            "diverted": flight["diverted"],
            "origin_iata": flight["origin"]["code_iata"],
            "destination_iata": flight["destination"]["code_iata"]
        }
    }
    
    print(json.dumps(old_metadata, indent=2))
    print(f"\nüìä Data Size: {len(json.dumps(old_metadata))} characters")
    print(f"üìä Fields Stored: {len(old_metadata['flight_data'])} fields")
    
    # Data we LOSE with old approach
    lost_data = [
        "Airport names, cities, timezones, coordinates",
        "Operator/airline information", 
        "Aircraft registration and model details",
        "Real-time position data (GPS coordinates)",
        "Route information with waypoints",
        "Codeshare flight information",
        "Baggage claim information",
        "Seat configuration",
        "Complete origin/destination objects",
        "And much more..."
    ]
    
    print(f"\n‚ùå DATA LOST (not stored):")
    for item in lost_data:
        print(f"   ‚Ä¢ {item}")

def show_new_approach():
    """Show what we now store (selected fields + complete JSON)"""
    print("\n\nüî∂ NEW APPROACH - Selected Fields + Complete AeroAPI JSON:")
    print("=" * 60)
    
    flight = EXAMPLE_AEROAPI_RESPONSE["flights"][0]
    
    # Structured fields for quick access (same as before)
    structured_metadata = {
        "last_aeroapi_sync": datetime.now(timezone.utc).isoformat(),
        "flight_data": {
            "gate_destination": flight["gate_destination"],
            "estimated_in": flight["estimated_on"],
            "actual_out": flight["actual_out"],
            "actual_in": flight["actual_on"],
            "aircraft_type": flight["aircraft_type"],
            "progress_percent": flight["progress_percent"],
            "departure_delay": flight["departure_delay"],
            "arrival_delay": flight["arrival_delay"],
            "cancelled": flight["cancelled"],
            "diverted": flight["diverted"],
            "origin_iata": flight["origin"]["code_iata"],
            "destination_iata": flight["destination"]["code_iata"]
        }
    }
    
    # PLUS complete raw data in flight_status_history
    complete_raw_data = {
        # Structured fields for quick queries
        "ident": flight["ident"],
        "status": flight["status"],
        "estimated_out": flight["estimated_out"],
        "gate_origin": flight["gate_origin"],
        # ... (all other structured fields)
        
        # THE COMPLETE AeroAPI JSON!
        "complete_aeroapi_response": EXAMPLE_AEROAPI_RESPONSE,
        "saved_at": datetime.now(timezone.utc).isoformat(),
        "source": "notifications_agent_optimized"
    }
    
    print("üìã STRUCTURED METADATA (for quick access):")
    print(json.dumps(structured_metadata, indent=2))
    
    print(f"\nüìã COMPLETE RAW DATA (in flight_status_history):")
    print("   ‚Ä¢ All structured fields (for queries)")
    print("   ‚Ä¢ PLUS complete_aeroapi_response with FULL JSON")
    print(f"   ‚Ä¢ Total AeroAPI data size: {len(json.dumps(EXAMPLE_AEROAPI_RESPONSE))} characters")
    print(f"   ‚Ä¢ Total fields in complete response: {count_all_fields(EXAMPLE_AEROAPI_RESPONSE)} fields")
    
    # Data we NOW PRESERVE with new approach
    preserved_data = [
        "‚úÖ Airport details (names, cities, timezones, coordinates)",
        "‚úÖ Operator information (British Airways, BA, BAW)",
        "‚úÖ Aircraft details (registration G-TTNE, Airbus A320neo)",
        "‚úÖ Real-time position (GPS coordinates, altitude, speed)",
        "‚úÖ Route with waypoints and distance",
        "‚úÖ Codeshare flights (SAS4680, AA6945)",
        "‚úÖ Baggage claim (gate 14)",
        "‚úÖ Seat configuration (20 business, 138 economy)",
        "‚úÖ Complete airport objects",
        "‚úÖ ALL future AeroAPI fields (automatic future-proofing)"
    ]
    
    print(f"\n‚úÖ DATA PRESERVED (stored in raw_data):")
    for item in preserved_data:
        print(f"   {item}")

def count_all_fields(obj, count=0):
    """Recursively count all fields in a nested object"""
    if isinstance(obj, dict):
        count += len(obj)
        for value in obj.values():
            count = count_all_fields(value, count)
    elif isinstance(obj, list):
        for item in obj:
            count = count_all_fields(item, count)
    return count

def show_benefits():
    """Show benefits of the new approach"""
    print("\n\nüéØ BENEFITS OF NEW HYBRID APPROACH:")
    print("=" * 60)
    
    benefits = [
        "üöÄ PERFORMANCE: Fast queries using structured metadata",
        "üîç COMPLETE DATA: Full AeroAPI response preserved in raw_data", 
        "üìä ANALYTICS: Can analyze ALL historical data, not just selected fields",
        "üêû DEBUGGING: Complete original JSON for troubleshooting",
        "üîÆ FUTURE-PROOF: Automatically captures new AeroAPI fields",
        "üíæ STORAGE: Structured data in trips.metadata + complete data in flight_status_history.raw_data",
        "üèÉ‚Äç‚ôÇÔ∏è QUERIES: Still fast for notifications (uses structured fields)",
        "üïµÔ∏è INVESTIGATION: Can access complete data when needed for analysis",
        "üìà INSIGHTS: Can extract new insights from historical complete data",
        "üõ†Ô∏è FLEXIBILITY: Don't need code changes to access new AeroAPI fields"
    ]
    
    for benefit in benefits:
        print(f"   {benefit}")
    
    print("\nüí∞ COST ANALYSIS:")
    print("   ‚Ä¢ Structured metadata: ~500 bytes")
    print("   ‚Ä¢ Complete raw_data: ~2-3KB per flight status")  
    print("   ‚Ä¢ Storage cost increase: ~5x")
    print("   ‚Ä¢ Data value increase: ~50x (complete information)")
    print("   ‚Ä¢ ROI: 10x better (debugging, analytics, future-proofing)")

def show_use_cases():
    """Show specific use cases enabled by complete data"""
    print("\n\nüí° NEW CAPABILITIES WITH COMPLETE DATA:")
    print("=" * 60)
    
    use_cases = [
        "üó∫Ô∏è Show flight path on map (route.waypoints)",
        "üè¢ Display full airport names in notifications",
        "‚è∞ Convert times to passenger's home timezone (airport coordinates)",
        "‚úàÔ∏è Show aircraft model and registration to aviation enthusiasts",
        "üîÑ Track codeshare flights for partner airline notifications",
        "üéí Include baggage claim info in landing notifications",
        "üìä Generate analytics on aircraft types, routes, delays",
        "üö® Alert on unusual route changes (diverted waypoints)",
        "üìç Show real-time flight position on map",
        "üè™ Partner with airport services based on terminal/gate info"
    ]
    
    for use_case in use_cases:
        print(f"   {use_case}")

async def main():
    """Main demo function"""
    print("üß™ DATA STORAGE COMPARISON DEMO")
    print("üéØ Question: Why only selected fields vs complete AeroAPI JSON?")
    print("üí≠ Answer: We should store BOTH for optimal performance + completeness!")
    
    show_old_approach()
    show_new_approach() 
    show_benefits()
    show_use_cases()
    
    print("\n" + "=" * 60)
    print("üéâ CONCLUSION: Hybrid approach gives us the best of both worlds!")
    print("   üìà Fast queries + Complete data preservation")
    print("   üéØ Perfect for notifications + Perfect for analytics")

if __name__ == "__main__":
    asyncio.run(main()) 